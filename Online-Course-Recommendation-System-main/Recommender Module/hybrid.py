# -*- coding: utf-8 -*-
"""Hybrid.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K8H-Tw_Eg5oGFevidmVnELrb03YnECyL

#Import Data
"""

import pandas as pd
 
courses = pd.read_csv("/content/Courses.csv")
users = pd.read_csv("/content/Users.csv")
ratings = pd.read_csv("/content/Ratings.csv")

uid =  1#@param {type:"integer"}
print(uid)

users.head(10)

courses.head(8)

ratings.head(9)

courses.dropna(inplace=True)
users.dropna(inplace=True)
ratings.dropna(inplace=True)

"""#Content Based

### Get Topic List
"""

fieldOfInterest = users['field_of_interest'][users['userId']==uid].str.split("|")
userTopics = fieldOfInterest[uid-1]
userTopics

courseCategories = courses['category'].str.split("|").values.tolist()
courseCategories[0]

"""### Find probabilities"""

print("Username: "+ users['name'][users.userId==uid][uid-1])
print("Preferred Topics: "+ users['field_of_interest'][users.userId==uid][uid-1])

content_probs = {}
content_probs_sorted ={}

for i in range(len(courseCategories)):
  id = i+1
  match = list(set(userTopics).intersection(set(courseCategories[i])))
  prob = len(match)/len(courseCategories[i])

  #print("probability of "+ courses['title'][courses['courseId']==id][i] +" : "+str(prob))
  content_probs[id] = prob
  

content_probs

"""### Final Sorted course list

"""

content_probs_nonzero ={}

for i,j in content_probs.items():
  if j!=float(0):
    content_probs_nonzero[i]=j

content_probs_sorted = sorted(content_probs_nonzero, key = content_probs.get, reverse = True) 
content_probs_sorted

"""#Collaborative Filtering

### Get likes and dislike data of each user
"""

u1_likes=[]
u1_dislikes=[]
other_likes={}
other_dislikes={}

  #Traverse ratings table to get likes and dislikes of each user 
  
for index, rows in ratings.iterrows():
    if (rows.userId == uid):
      if (rows.rating == 1):
        u1_likes.append(rows.courseId.tolist())
      elif (rows.rating == -1):
        u1_dislikes.append(rows.courseId.tolist())

    else:
      if rows.userId not in other_likes.keys():
        other_likes[rows.userId] = []
      if rows.userId not in other_dislikes.keys():
        other_dislikes[rows.userId] = []
      if (rows.rating == 1):
        other_likes[rows.userId].append(rows.courseId.tolist())
      elif (rows.rating == -1):
        other_dislikes[rows.userId].append(rows.courseId.tolist())

print("User liked: " + str(u1_likes))
print("User disliked: " + str(u1_dislikes))
print("Other users likes: " + str(other_likes))
print("Other users dislikes: " + str(other_dislikes))

"###Similarity with other users"""

common_likes=[]
common_dislikes=[]
opposite_rating1=[]
opposite_rating2=[]
similarity={}
# Traverse Users table to find similarity with each user
for index,rows in users.iterrows():
  #if the user is not in ratings table:
  if rows.userId not in other_likes.keys():
    other_likes[rows.userId]=[]
  if rows.userId not in other_dislikes.keys():
    other_dislikes[rows.userId]=[]
  if (rows.userId == uid):
    continue
  else:
    common_likes=list(set(u1_likes).intersection(set(other_likes[rows.userId])))
    common_dislikes=list(set(u1_dislikes).intersection(set(other_dislikes[rows.userId])))
    opposite_rating1=list(set(u1_likes).intersection(set(other_dislikes[rows.userId])))
    opposite_rating2=list(set(u1_dislikes).intersection(set(other_likes[rows.userId])))
    lst=[u1_likes,u1_dislikes,other_likes[rows.userId],other_dislikes[rows.userId]]
    total=list(set().union(*lst))
    if len(total)!=0:
      similarity[rows.userId]=(len(common_likes)+len(common_dislikes)-len(opposite_rating1)-len(opposite_rating2))/len(total)
    else:
      similarity[rows.userId]=0
print()
print("Similarity with other users : ",similarity)
print()

"""###Rated users of each course"""

course_likes={}
course_dislikes={}
#Traverse Ratings table to get liked and disliked users of each course

for index, rows in ratings.iterrows():
  
  if rows.courseId not in course_likes.keys():
    course_likes[rows.courseId]=[]
  if rows.courseId not in course_dislikes.keys():
    course_dislikes[rows.courseId]=[]
  if (rows.rating == 1):
    course_likes[rows.courseId].append(rows.userId.tolist())
  if (rows.rating == -1):
    course_dislikes[rows.courseId].append(rows.userId.tolist())
print(" Course Likes : ",course_likes,'\n',"Course Dislikes : ",course_dislikes)

"""###Find Probabilities"""

collab_probs={}

#Traverse Courses table to get similarity of liked and disliked users

for index,rows in courses.iterrows():
    if rows.courseId not in course_likes.keys():
      course_likes[rows.courseId]=[]
    if rows.courseId not in course_dislikes.keys():
      course_dislikes[rows.courseId]=[]

    similarity_sum_liked=0
    similarity_sum_disliked=0

    for i in course_likes[rows.courseId]:
      if (i==uid):
        continue
      similarity_sum_liked += similarity[i]
    for i in course_dislikes[rows.courseId]:
      if (i==uid):
        continue
      similarity_sum_disliked += similarity[i]

    liked_users=len(course_likes[rows.courseId])
    disliked_users=len(course_dislikes[rows.courseId])

    if (liked_users+disliked_users) != 0:
      prob_to_like=(similarity_sum_liked-similarity_sum_disliked)/(liked_users+disliked_users)
    else:
      prob_to_like=0

    collab_probs[rows.courseId]=prob_to_like

print()
print("Probability list:")
print(collab_probs)
print()
sorted_probability=sorted(collab_probs,key=collab_probs.get,reverse=True)
print("Sorted probability:")
print(sorted_probability)
print()

"""###Final sorted course list"""

#Determining the recommendations by taking into account those probabilities which are Non-zero
collab_probs_nonzero={}
for i,j in collab_probs.items():
  if j!=float(0):
    collab_probs_nonzero[i]=j

collab_probs_sorted = sorted(collab_probs_nonzero, key = collab_probs.get, reverse = True)

collab_probs_sorted

print("Recommendations:")
print()
for i in range(len(collab_probs_sorted)):
  print(courses.title[collab_probs_sorted[i] - 1])

"""#Hybrid"""

hybrid_probs = {}


for index,rows in courses.iterrows():

  hybrid_probs[rows.courseId] = content_probs[rows.courseId] * collab_probs[rows.courseId]


hybrid_probs

hybrid_probs_nonzero={}
for i,j in hybrid_probs.items():
  if j!=float(0):
    hybrid_probs_nonzero[i]=j

hybrid_probs_sorted = sorted(hybrid_probs_nonzero, key = collab_probs.get, reverse = True)

hybrid_probs_sorted

"""#Final Recommendation"""

final_list = []

print("Recommendations: ")
print("----------------")
print()
print("Hybrid:")
print()

for i in hybrid_probs_sorted:
  print(courses['title'][courses['courseId']==i][i-1] +" ( "+str(hybrid_probs[i]) +" )")
  final_list.append(i)

print()
print()
print("Content Based only:")
print()

for i in content_probs_sorted:
  if i in final_list:
    continue
  print(courses['title'][courses['courseId']==i][i-1] +" ( "+str(content_probs[i]) +" )")
  final_list.append(i)

print()
print()
print("Collaborative Filtering only: ")
print()

for i in collab_probs_sorted:
  if i in final_list:
    continue
  print(courses['title'][courses['courseId']==i][i-1] +" ( "+str(collab_probs[i]) +" )")
  final_list.append(i)